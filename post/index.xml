<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Blog</title>
    <link>http://takunagai.github.io/post/</link>
    <description>Recent content in Posts on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <managingEditor>taky1973@gmail.com (Taku Nagai)</managingEditor>
    <webMaster>taky1973@gmail.com (Taku Nagai)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 24 Jul 2015 09:01:00 +0900</lastBuildDate>
    <atom:link href="http://takunagai.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Markdown関連の便利ツール まとめ</title>
      <link>http://takunagai.github.io/post/convinient_tools_for_markdown/</link>
      <pubDate>Fri, 24 Jul 2015 09:01:00 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/convinient_tools_for_markdown/</guid>
      <description>

&lt;h2 id=&#34;htmlからmarkdownに変換:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;HTMLからMarkdownに変換&lt;/h2&gt;

&lt;h3 id=&#34;mark-it-down:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;Mark It Down&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://markitdown.medusis.com/&#34;&gt;Mark It Down: convert rich text to Markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img-url&#34; alt=&#34;画像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Webページからコピペした内容を文書構造を保ったままMarkdownに変換してくれるWebサービス&lt;br /&gt;
HTMLコードならサニタイジングされる。使う目的によってはすごく便利&lt;/p&gt;

&lt;h3 id=&#34;to-markdown:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;to-markdown&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://domchristie.github.io/to-markdown/&#34;&gt;to-markdown - an HTML to Markdown converter written in javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTMLをMarkdown化。GitHub Flavored Markdownも対応&lt;/p&gt;

&lt;h3 id=&#34;heck-yes-markdown:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;Heck Yes Markdown&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://heckyesmarkdown.com/&#34;&gt;Heck Yes Markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URLで指定したページをMarkdown化。ブックマークレットやAPIもあり&lt;/p&gt;

&lt;h3 id=&#34;その他:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;その他&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://pronama.azurewebsites.net/2014/05/16/html-to-markdown-libraries-and-tools/&#34;&gt;HTML を Markdown へ変換するときに知っておきたいライブラリ 11選 + α | プログラミング生放送&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;基本チュートリアル-チートシート:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;基本チュートリアル、チートシート&lt;/h2&gt;

&lt;h2 id=&#34;アプリ:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;アプリ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mou(Mac)&lt;/li&gt;
&lt;li&gt;(Windows)&lt;/li&gt;
&lt;li&gt;(iOS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;オンラインmarkdownエディタ:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;オンラインMarkdownエディタ&lt;/h2&gt;

&lt;h3 id=&#34;markable-in:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;Markable.in&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://markable.in/&#34;&gt;Markable.in - A remarkable online markdown editor.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dropbox、Evernoteに保存可、Tumblr投稿も&lt;/p&gt;

&lt;h3 id=&#34;stackedit:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;StackEdit&lt;/h3&gt;

&lt;h4 id=&#34;googleドライブ-x-stackedit:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;Googleドライブ x StackEdit&lt;/h4&gt;

&lt;p&gt;画像あり、別ページに？&lt;/p&gt;

&lt;h2 id=&#34;実装用markdownパーサー:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;実装用Markdownパーサー&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jonschlinkert/remarkable&#34;&gt;remarkable - GitHub&lt;/a&gt;/&lt;a href=&#34;https://jonschlinkert.github.io/remarkable/demo/&#34;&gt;demo&lt;/a&gt; JavaScript製のクライアント/サーバサイド両方で使えるMarkdownパーサ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tibastral.github.io/markdownify/&#34;&gt;Markdownify by tibastral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sugarshin/items/3ce64420b0181990480e&#34;&gt;React.jsでMarkdownエディタ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;静的サイトジェネレーター:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;静的サイトジェネレーター&lt;/h2&gt;

&lt;p&gt;Markdownで記事作成 → 静的サイト生成 → 公開(サーバーにアップ)&lt;br /&gt;
CMSに付きものの重さ、セキュリティ不安、管理の手間から開放される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo :: A fast and modern static website engine&lt;/a&gt; (go言語) とにかく早いと評判&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll • Simple, blog-aware, static sites&lt;/a&gt; (ruby)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; (ruby)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nanoc.ws/&#34;&gt;nanoc: a static site generator written in Ruby » home&lt;/a&gt; (ruby)&lt;/li&gt;
&lt;li&gt;他にも色々ある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wordpress-プラグイン:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;WordPress プラグイン&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wordpress.org/plugins/jetpack-markdown/&#34;&gt;JP Markdown | WordPress Plugins&lt;/a&gt; 自分はMarkdown化したくないページが意図せずサニタイジングされたので使うの辞めた&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;styledocco-x-gulp-markdownでスタイルガイド自動作成:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;StyleDocco x gulp Markdownでスタイルガイド自動作成&lt;/h2&gt;

&lt;h3 id=&#34;styledocco-のインストール-要node-js:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;styledocco のインストール(要node.js)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;npm install -g styledocco&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jacobrask.github.io/styledocco/&#34;&gt;StyleDocco&lt;/a&gt;
&lt;a href=&#34;http://kazu69.net/blog/tec/1411&#34;&gt;StyleDoccoでstyleguideを作成 | 69log&lt;/a&gt;
そのモジュールのPSD素材の管理場所を記載しておくとよい&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://app.codegrid.net/entry/styledocco-1&#34;&gt;賢く使うStyleDocco導入ガイド - 基本的な使い方 | CodeGrid&lt;/a&gt;
&lt;a href=&#34;http://toybox-design.net/?p=640&#34;&gt;『StyleDocco』でCSSプリプロセッサのスタイルガイド作成 | toybox-design.net&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;with-gulp-js:f1e589fa9c98f42e42de9634ffdea3c5&#34;&gt;with gulp.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/gulp-styledocco&#34;&gt;gulp-styledocco&lt;/a&gt;
&lt;a href=&#34;http://blog.photosynthesic.jp/2014/07/html5_boilerplate-sass-gulp-styledocco/&#34;&gt;HTML5 boilerplateをsassでgulpでstyledoccoな感じにしてみた&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web系技術のまとめ一覧</title>
      <link>http://takunagai.github.io/post/list_of_webdesign_techniques/</link>
      <pubDate>Fri, 24 Jul 2015 08:53:00 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/list_of_webdesign_techniques/</guid>
      <description>

&lt;h2 id=&#34;全般:8ee210feada63183dee0738f4da3c752&#34;&gt;全般&lt;/h2&gt;

&lt;p&gt;≒ は同等・類似機能を持つもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上流 (設計、フロー etc.)&lt;/li&gt;
&lt;li&gt;Webデザイン、UI/UX&lt;/li&gt;
&lt;li&gt;SEO/SEM&lt;/li&gt;
&lt;li&gt;Webライティング&lt;/li&gt;
&lt;li&gt;セキュリティ&lt;/li&gt;
&lt;li&gt;プログラミング基本 (アルゴリズム etc.)&lt;/li&gt;
&lt;li&gt;開発ツール、開発手法

&lt;ul&gt;
&lt;li&gt;Vagrant + VirturalBox&lt;/li&gt;
&lt;li&gt;CoreOS + Docker&lt;/li&gt;
&lt;li&gt;Yeoman, gulp.js, Bower JavaScript&amp;gt;ビルドツールの項を参照&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTML

&lt;ul&gt;
&lt;li&gt;HTML/CSSコーディング、レスポンシブデザイン&lt;/li&gt;
&lt;li&gt;HTML5（Drag&amp;amp;Drop API,Web Workers,Canvas,Web Storage,WebSocket 他）&lt;/li&gt;
&lt;li&gt;Jade ≒ ejs,haml,Slim&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSS

&lt;ul&gt;
&lt;li&gt;CSS3&lt;/li&gt;
&lt;li&gt;Sass(SCSS) ≒ LESS,Stylus&lt;/li&gt;
&lt;li&gt;StyleDocco スタイルガイド自動作成、gulpで自動化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JavaScript

&lt;ul&gt;
&lt;li&gt;Pure JavaScript&lt;/li&gt;
&lt;li&gt;jQuery ライブラリ（DOM操作、クロスブラウザ対応 他） ≒ zept(jQuery互換)&lt;/li&gt;
&lt;li&gt;Underscore.js JavaScriptユーティリティ・ライブラリ ≒ Lo-Dash(Underscore.js互換版/拡張版)&lt;/li&gt;
&lt;li&gt;Handlehars JSテンプレートエンジン ≒ Mustache,Hogan.js(Mustache拡張),Underscore.jsの_.templateメソッド&lt;/li&gt;
&lt;li&gt;D3.js データ可視化ライブラリ&lt;/li&gt;
&lt;li&gt;node.js

&lt;ul&gt;
&lt;li&gt;CoffeeScript JavaScriptがより短く簡素に書ける言語。JavaScriptにコンパイルして使用&lt;/li&gt;
&lt;li&gt;mocha node上で動くJavaScriptテストフレームワーク&lt;/li&gt;
&lt;li&gt;MEAN Stack

&lt;ul&gt;
&lt;li&gt;MongoDB →データベースの項を参照&lt;/li&gt;
&lt;li&gt;express node.jsのMVCフレームワーク&lt;/li&gt;
&lt;li&gt;Angular.js フロントエンド用MVWフレームワーク。HTMLがテンプレート ≒ backbone.js,Knockout.js,ember.js&lt;/li&gt;
&lt;li&gt;node.js(nodebrew：バージョン管理,npm：パッケージ管理,forever：永続化,async.js：フロー制御)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ビルドツール、タスクランナー、自動化、パッケージ管理

&lt;ul&gt;
&lt;li&gt;Yeoman(yo) 雛形作成ツール。下記2つをセット使用。Webアプリに比重 ≒ Middleman(Ruby製、静的サイト向け)&lt;/li&gt;
&lt;li&gt;gulp.js タスクランナー ≒ Grunt,Brunch,Codekit&lt;/li&gt;
&lt;li&gt;Bower フロントエンド(js,css,html)のパッケージマネージャ ≒ Jam&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;React.js(Facebook製UIライブラリ、中規模以上向け、jQuery併用難しい) &lt;a href=&#34;https://html5experts.jp/hokaccha/13301/&#34;&gt;»解説&lt;/a&gt; &lt;a href=&#34;http://wazanova.jp/items/1582&#34;&gt;»解説2&lt;/a&gt; &lt;a href=&#34;http://mizchi.hatenablog.com/entry/2014/09/02/201728&#34;&gt;» 解説3&lt;/a&gt; &lt;a href=&#34;http://qiita.com/advent-calendar/2014/reactjs&#34;&gt;解説4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Browserify JSモジュール管理。Debowerifyプラグイン併用でnpmだけでなくbower管理のライブラリも扱える ≒ require.js (&lt;a href=&#34;http://qiita.com/cognitom/items/4c63969b5085c90639d4&#34;&gt;»解説&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;テスト用

&lt;ul&gt;
&lt;li&gt;jasmine 2 JSテストフレームワーク ≒ mocha + chai(アサーションライブラリ) + sinon.js(モックライブラリ)&lt;/li&gt;
&lt;li&gt;PhantomJS（ヘッドレスブラウザ）&lt;/li&gt;
&lt;li&gt;karma(リモートテストランナー）&lt;/li&gt;
&lt;li&gt;travis.yml（継続的インテグレーション）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tmlib.js ≒ enchant.js ゲーム開発&lt;/li&gt;
&lt;li&gt;Titanium mobile モバイル向けクロスプラットフォーム開発ツール ≒ cordova(PhoneGap),Sencha Touch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webcomponents.org/&#34;&gt;WebComponents&lt;/a&gt; HTMLコンポーネント化(パーツの再利用容易に)。Web標準になる?、Google製 (&lt;a href=&#34;http://www.h2.dion.ne.jp/~defghi/webc/webc.htm&#34;&gt;»解説&lt;/a&gt;) &lt;a href=&#34;http://liginc.co.jp/web/html-css/html/58267&#34;&gt;解説2&lt;/a&gt; &lt;a href=&#34;https://blog.agektmr.com/2014/05/web-components.html&#34;&gt;»解説3&lt;/a&gt; (&lt;a href=&#34;http://ameblo.jp/ca-1pixel/entry-11815188808.html&#34;&gt;»解説4&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Polymer WebComponentsのラッパーライブラリ。polyfill、データバインディング、アニメーション他含む。Google製 (&lt;a href=&#34;http://www.ibm.com/developerworks/jp/web/library/wa-polymer/&#34;&gt;»解説&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PHP

&lt;ul&gt;
&lt;li&gt;ライブラリ、フレームワーク&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CMS、静的サイトジェネレーター

&lt;ul&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;その他サーバーサイドの言語&lt;/li&gt;
&lt;li&gt;データベース

&lt;ul&gt;
&lt;li&gt;MongoDB NoSQLドキュメント指向DB（JSと親和性が高くnode.js+Mongooseとの組み合わせでの使用が人気）&lt;/li&gt;
&lt;li&gt;MySQL/MariaDB オープンソースのRDBMS ≒ PostgreSQL&lt;/li&gt;
&lt;li&gt;SQLite 軽量RDBMS。Mac,iPhone,Androidに標準搭載&lt;/li&gt;
&lt;li&gt;lawnchair LocalStorageへ簡単にCRUDできるシンプルなJSONストレージ&lt;/li&gt;
&lt;li&gt;FileMaker&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Web API

&lt;ul&gt;
&lt;li&gt;OAuth 2.0 (クライアントサイド/サーバーサイド)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;iOSアプリ開発

&lt;ul&gt;
&lt;li&gt;Swift ≒ Objective-C&lt;/li&gt;
&lt;li&gt;XCode&lt;/li&gt;
&lt;li&gt;Cocos2D-Swift (クロスプラットフォーム ゲームフレームワーク)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AppleScript&lt;/li&gt;
&lt;li&gt;バージョン管理

&lt;ul&gt;
&lt;li&gt;Git、Github、Bitbucket、GitBucket&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サーバー

&lt;ul&gt;
&lt;li&gt;コマンド(bash)&lt;/li&gt;
&lt;li&gt;Vagrant 仮想サーバー管理&lt;/li&gt;
&lt;li&gt;VirtualBox 仮想化ソフト&lt;/li&gt;
&lt;li&gt;構成管理ツール Ansible(設定はYAML), Chef, Puppet&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;VPS(さくらVPS, VULTR, Digital Ocean)&lt;/li&gt;
&lt;li&gt;Docker コンテナ型仮想化。サーバー環境をエミュレート。Gitライクなバージョン管理も可能（&lt;a href=&#34;http://www.publickey1.jp/blog/14/dockerdockerfiledocker_meetup_tokyo_2.html&#34;&gt;わかりやすい説明&lt;/a&gt;、&lt;a href=&#34;http://qiita.com/hakobera/items/db73c5531d65cfeed7ce&#34;&gt;Mac上で動かす方法&lt;/a&gt;）

&lt;ul&gt;
&lt;li&gt;Fig マルチコンテナ構成ツール。複数のコンテナを1つのシステムとして定義するための正式な方法となりそう &lt;a href=&#34;http://www.publickey1.jp/blog/14/dockerfig2orchard.html&#34;&gt;Docker社がマルチコンテナ構成ツール「Fig」を採用。開発した社員2名のOrchardを買収 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AWS Amazon&lt;/li&gt;
&lt;li&gt;Amazon Cognito モバイルデバイスでローカルのデータストアと認証機能。クラウド上のデータストアとの同期機能（&lt;a href=&#34;http://www.publickey1.jp/blog/14/amazon_cognito.html&#34;&gt;わかりやすい説明&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Amazon Zocalo Dropboxライクなクラウド・ストレージ。Active Directory(Windows Server)と連携可能なするユーザー管理機能を備える。月額5ドルで200GB（&lt;a href=&#34;http://www.publickey1.jp/blog/14/amazon_zocalodropbox5200gb.html&#34;&gt;わかりやすい説明&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Azure&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Apache, Nginx&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo のテンプレート 基本</title>
      <link>http://takunagai.github.io/post/hugo/template/</link>
      <pubDate>Sat, 11 Jul 2015 13:36:46 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/hugo/template/</guid>
      <description>

&lt;h2 id=&#34;基礎知識:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;基礎知識&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HugoのテンプレートエンジンはGo言語標準の Package template(html/template)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;変数:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;変数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;:=&lt;/code&gt;で変数に値を代入&lt;br /&gt;
BaseUrl(設定ファイルで設定)をテンプレート中の複数箇所で使う場合に変数に入れたりする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $baseUrl := .Site.BaseUrl }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;記事のフロントマターの値を取得:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;記事のフロントマターの値を取得&lt;/h3&gt;

&lt;p&gt;フロントマターとは、各記事の冒頭にtoml等で書く記事のメタデータ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ .Params.Title }}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;設定ファイル-config-toml-の値を取得:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;設定ファイル(config.toml)の値を取得&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{{ .Site.Params.CopyrightHTML }}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;グローバル変数にアクセス:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;グローバル変数にアクセス&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$&lt;/code&gt;を付けると、場所関係なくグローバル変数にアクセスできる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $.Site.Title }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コメント:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;コメント&lt;/h2&gt;

&lt;p&gt;html生成時に破棄される&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{/* a comment */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな書き方は不可(エラー)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Site.Title /* サイトのタイトル */}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サニタイジング:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;サニタイジング&lt;/h2&gt;

&lt;p&gt;UNIXコマンドのPipe処理のような記述で、HTMLをサニタイジング(エスケープ)してくれる。&lt;br /&gt;
(&lt;code&gt;&amp;lt;&lt;/code&gt; を &lt;code&gt;&amp;amp;lt;&lt;/code&gt; に変換したりとか。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{. | html}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;urlize:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;urlize&lt;/h2&gt;

&lt;p&gt;URLに使いたい文字列をサニタイズ。&lt;br /&gt;
半角スペースを &lt;code&gt;-&lt;/code&gt; に変換したり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ . | urlize }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;htmlコメントの出力:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;HTMLコメントの出力&lt;/h2&gt;

&lt;p&gt;素のHTMLコメントは生成時に消えてしまうので処理が必要&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;&amp;lt;!--[if lt IE 8]&amp;gt;&amp;quot; | safeHTML }}
    &amp;lt;p class=&amp;quot;browserupgrade&amp;quot;&amp;gt;あなたは旧いWebブラウザを使用されています。
    安全性を確保し、表示の適正化するために&amp;lt;a href=&amp;quot;http://browserupgrade.com/&amp;quot;&amp;gt;ブラウザをアップデート&amp;lt;/a&amp;gt;してください。&amp;lt;/p&amp;gt;
{{ &amp;quot;&amp;lt;![endif]--&amp;gt;&amp;quot; | safeHTML }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インクルード:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;インクルード&lt;/h2&gt;

&lt;p&gt;パーシャル(layout/partial ディレクトリに入れたコードの断片、スニペット)のインクルード&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;head.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同上の処理を &lt;code&gt;template&lt;/code&gt; でも書けるが、上の記述の方が簡潔&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;partials/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;生成htmlのインデントを揃えたい場合:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;生成HTMLのインデントを揃えたい場合&lt;/h3&gt;

&lt;p&gt;パーシャル読み込み行にインデントを入れると、そのインデントがそのままHTMLに反映される&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;nav id=&amp;quot;main-menu&amp;quot;&amp;gt;
        {{ partial &amp;quot;menu.html&amp;quot; .Site.Menus.main }}
      &amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左詰めにした方が、生成後のHTMLのインデントを制御しやすい&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;nav id=&amp;quot;main-menu&amp;quot;&amp;gt;
{{ partial &amp;quot;menu.html&amp;quot; .Site.Menus.main }}
      &amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;条件分岐:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;条件分岐&lt;/h2&gt;

&lt;p&gt;設定ファイル(config.toml)に値が設定されていれば処理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.Tagline}}&amp;lt;p class=&amp;quot;tagline&amp;quot;&amp;gt;{{ .Site.Params.Tagline }}&amp;lt;/p&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フロントマターに値が設定されていれば処理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでもいける？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params.Title }}&amp;lt;h4&amp;gt;{{ .ParamsTitle }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if 文、if else 文も使える。if not で否定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Description}}&amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;{{ .Description }}&amp;lt;/p&amp;gt;
{{else}}値がない場合の処理{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;withで等価の処理。withに続けたものが .(ドット) にセットされる&lt;br /&gt;
短く書けるのでこの書き方が良いと思う&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Description }}&amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;{{ . }}&amp;lt;/p&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;データ件数で分岐処理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if gt (len .TableOfContents) 2500 }}{{.TableOfContents}}{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ループ-配列の出力:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;ループ・配列の出力&lt;/h2&gt;

&lt;p&gt;ループ処理。配列の要素が順に&lt;code&gt;.&lt;/code&gt;にセットされる&lt;br /&gt;
例はタグ出力。値がなければ何も出力されない&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Params.tags }}&amp;lt;a href=&amp;quot;/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;
{{ else }}タグ無し{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;キーと値の出力&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
  {{ $index }} : {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定件数を表示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages }}
  &amp;lt;li&amp;gt;{{ .Title }}&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他にソートなどもできる&lt;/p&gt;

&lt;h2 id=&#34;参考記事:1cfa0a57d825e12f541e7967fd546b1b&#34;&gt;参考記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/templates/go-templates/&#34;&gt;Go Template Primer(公式)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/pkg/text/template/&#34;&gt;template - The Go Programming Language&lt;/a&gt;&lt;br /&gt;
Actions の項〜 がわかりやすい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jan.newmarch.name/go/template/chapter-template.html&#34;&gt;Inserting object values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://astaxie.gitbooks.io/build-web-application-with-golang/content/ja/07.4.html&#34;&gt;テンプレートの処理 | build-web-application-with-golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangtutorials.blogspot.jp/2011/06/go-templates.html&#34;&gt;GoLang Tutorials: Go Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;template - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript / jQuery 自分の使い方</title>
      <link>http://takunagai.github.io/post/javascript/base_javascript_jquery/</link>
      <pubDate>Sat, 21 Feb 2015 17:56:56 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/javascript/base_javascript_jquery/</guid>
      <description>

&lt;h2 id=&#34;jquery-基本:2763c954d56445700fdcab66b8eafc7c&#34;&gt;jQuery 基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IE8以前を切り捨て軽量化した jQuery 2.x が出ているが、IE8はまだ切れないので現状1の最新版(1.11.x)を使用&lt;/li&gt;
&lt;li&gt;次バージョン：&lt;a href=&#34;http://www.publickey1.jp/blog/14/jquery_2xjquery_30jquery_1xjquery_compat_30jquery.html&#34;&gt;「jQuery 2.x→jQuery 3.0」「jQuery 1.x→jQuery Compat 3.0」に - Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;キャッシュによる高速化が見込めるCDN(Google API or jQuery公式)のものを使用。読み込めない時のフォールバックを用意&lt;/li&gt;
&lt;li&gt;jQuery本体の読み込みタグは静的サイトならbody閉じタグ直前に配置。WordPressはプラグインとの兼ね合いで冒頭に置いた方が無難か？&lt;/li&gt;
&lt;li&gt;最新版の方が軽くて早いのでなるべく最新版を使いたい (でも古いバージョンのまま放置しているサイトもあるのが現状)&lt;/li&gt;
&lt;li&gt;古いサイトのメンテで1.9以降切り捨てられたAPIが使われている場合は &lt;a href=&#34;http://jquery.com/download/#jquery-migrate-plugin&#34;&gt;jQuery Migrate プラグイン&lt;/a&gt;を入れると良い&lt;/li&gt;
&lt;li&gt;jQuery互換で早くて軽いという&lt;a href=&#34;http://zeptojs.com/&#34;&gt;Zepto&lt;/a&gt;があるが、リスク(なんか不安、jQueryプラグインが動かない場合があるらしい)を避け使っていない。CSSフレームワークのFoundationやクックパッドスマホ版など実用例はある&lt;/li&gt;
&lt;li&gt;jQueryプラグインは、plugins.js に統合することでHTMLをスッキリさせHTTPリクエストを減らせる。圧縮するとなお良い(plugins.min.js。gulpなどの自動化ツールを使う)&lt;/li&gt;
&lt;li&gt;WordPressで最新版jQueryを読み込む場合。WordPressに元から組み込んであるものは外すこと&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  wp_deregister_script( &#39;jquery&#39; );
  wp_enqueue_script( &#39;jquery&#39;, &#39;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&#39;, array(), &#39;20130115&#39;, true );
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modernizr:2763c954d56445700fdcab66b8eafc7c&#34;&gt;modernizr&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ブラウザの機能サポート状況(HTML5、CSS3)を判定し分岐処理ができる&lt;/li&gt;
&lt;li&gt;HTML5未対応ブラウザにHTML5タグを認識させる HTML5-Shiv を含む&lt;/li&gt;
&lt;li&gt;リサイズ時にドキュメントの幅を取得する機能 (= window.matchMedia()) が付いてる&lt;/li&gt;
&lt;li&gt;設置場所は headタグ内&lt;/li&gt;
&lt;li&gt;本家サイトで機能を付け加えたりのカスタマイズができるが、メンテナンスを考えるとデフォルトのものを使うのが良いと思う&lt;/li&gt;
&lt;li&gt;基本的な使い方：&lt;a href=&#34;http://liginc.co.jp/web/js/other-js/128673&#34;&gt;modernizr.js の機能と利用方法 - LIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;判定可能な機能(※ハイフン等書き方に注意)：&lt;a href=&#34;http://modernizr.com/docs/#s2&#34;&gt;Modernizr Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;これも読み込めない時のフォールバックを用意&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;例1-ブラウザに実装されている機能を判定しクラスを付加:2763c954d56445700fdcab66b8eafc7c&#34;&gt;例1：ブラウザに実装されている機能を判定しクラスを付加&lt;/h3&gt;

&lt;p&gt;modernizer適用前&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;html class=&amp;quot;no-js&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;modernizer適用後。これでCSS等で分岐処理可能&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html class=&amp;quot;js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;例2-javascript中で現在のブラウザが指定の機能を持つか判定して分岐処理:2763c954d56445700fdcab66b8eafc7c&#34;&gt;例2：JavaScript中で現在のブラウザが指定の機能を持つか判定して分岐処理&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if (Modernizr.geolocation) { //Geolocation API に対応しているかチェック
  //対応してる時の処理
}
else {  
  //対応してない時の処理
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;throttle-と-debounce:2763c954d56445700fdcab66b8eafc7c&#34;&gt;throttle と debounce&lt;/h2&gt;

&lt;p&gt;ともに必要以上のイベント発生を抑えるのに使用。scrollやresize時のイベントによく使う。 throttleは、実行間隔をnミリ秒に抑える。例えば、scroll時のイベント発生を◎ミリ秒ごとに抑えるなど debounceは、nミリ秒、繰り返しの呼び出しをさせない(= 入力がストップしてnミリ秒経ったらイベント発生)。例えば、resize操作完了後◎ミリ秒たったらイベント発生させるなど。 Underscore.js の関数か、jquery.ba-throttle-debounce.min.js を使うとシンプルに書ける&lt;br /&gt;
自分は便利なメソッドてんこ盛りのUnderscore.jsを標準で入れるようにしたので、Underscore.jsのものを使う&lt;/p&gt;

&lt;h3 id=&#34;underscore-js-のメソッドを使用:2763c954d56445700fdcab66b8eafc7c&#34;&gt;Underscore.js のメソッドを使用&lt;/h3&gt;

&lt;p&gt;underscore-min.js は 16KB&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://underscorejs.org/#throttle&#34;&gt;Underscore.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/ninoseki/20110414/1302786001&#34;&gt;便利機能満載のライブラリUnderscore.js - にのせき日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;構文&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_.throttle(function, 500);//引数：関数, ミリ秒
_.debounce(function, 500);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;実装:2763c954d56445700fdcab66b8eafc7c&#34;&gt;実装&lt;/h4&gt;

&lt;p&gt;適用前&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).scroll(function(){
  //処理
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適用後) 例：スクロールイベントで使用時&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).scroll(_.throttle(function(){
  //処理
}, 500));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jquery-throttle-debounce-を使用:2763c954d56445700fdcab66b8eafc7c&#34;&gt;jquery-throttle-debounce を使用&lt;/h3&gt;

&lt;p&gt;jquery.ba-throttle-debounce.min.js は731バイト&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://benalman.com/projects/jquery-throttle-debounce-plugin/&#34;&gt;jQuery throttle / debounce&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;処理回数を見るサンプル：&lt;a href=&#34;http://benalman.com/code/projects/jquery-throttle-debounce/examples/throttle/&#34;&gt;jQuery throttle / debounce » Examples » Throttle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pure JavaScript で実装するには：&lt;a href=&#34;http://blog.tsumikiinc.com/article/20141125_javascript-event-throttle.html&#34;&gt;JavaScriptでの多発するイベントの間引き処理 - つみきブログ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore.js&lt;/a&gt; (JavaScriptのユーティリティライブラリ) に同等メソッド throttle()/debounce() がある&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;実装-1:2763c954d56445700fdcab66b8eafc7c&#34;&gt;実装&lt;/h4&gt;

&lt;p&gt;適用前&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).scroll(function(){
  //処理
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適用後 (500ミリ秒ごに処理)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(window).scroll($.throttle(500, function() {
  //処理
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;現在のページtopに戻る-ページ内スムーススクロール:2763c954d56445700fdcab66b8eafc7c&#34;&gt;現在のページTopに戻る &amp;amp; ページ内スムーススクロール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/takunagai/457302aaa44421bbc958&#34;&gt;ページ内スムーススクロール &amp;amp; ページ上部へ戻るボタン（要jQuery）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記のthrottleを使用&lt;/p&gt;

&lt;h2 id=&#34;横に並んだブロック要素の高さを揃える:2763c954d56445700fdcab66b8eafc7c&#34;&gt;横に並んだブロック要素の高さを揃える&lt;/h2&gt;

&lt;p&gt;自分は &lt;a href=&#34;http://css-tricks.com/equal-height-blocks-in-rows/&#34;&gt;Equal Height Blocks in Rows - CSS-Tricks&lt;/a&gt; をウインドウリサイズ時にも対応するよう改良したPure JavaScriptのものを使用&lt;/p&gt;

&lt;h3 id=&#34;jquery-プラグイン:2763c954d56445700fdcab66b8eafc7c&#34;&gt;jQuery プラグイン&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://file.urin.take-uma.net/jquery.tile.js-Demo.html&#34;&gt;jquery.tile.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.webcreativepark.net/2013/10/21-112000.html&#34;&gt;jquery.heightLine.js&lt;/a&gt; (to-R)、Equal Height&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ポリフィル-polyfill-色々:2763c954d56445700fdcab66b8eafc7c&#34;&gt;ポリフィル (polyfill) 色々&lt;/h2&gt;

&lt;p&gt;古いブラウザにモダンブラウザのみで動く機能を追加させる ただし処理が重くなるので極力使用しないことが望ましい&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iscroll, iscroll-lite スマホで position: fixed&lt;/li&gt;
&lt;li&gt;picturefill picture要素やimgのsrcset/sizes属性指定などを使えるように(Chrome, Opera以外)&lt;/li&gt;
&lt;li&gt;PIE_IE9.js, PIE_IE678.js border-radius, box-shadow(insetは非対応), 複数の背景 ,border-image, 背景グラデーション ※IE9は後者2つのみ&lt;/li&gt;
&lt;li&gt;rem.min.js IE8 以下でもフォント単位 rem が使えるように&lt;/li&gt;
&lt;li&gt;respond.min.js IE8以下でレスポンシブ対応させる&lt;/li&gt;
&lt;li&gt;selectivizr (IE8以下でCSS3セレクタ使用できるように)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下、IE8以下非対応なら不要&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;minmax IE6以下でmin-width,max-width, min-height , max-heightを利用可能に。IE6切り捨てるなら不要&lt;/li&gt;
&lt;li&gt;boxsizing.htc IE7以下でbox-sizingを使えるように&lt;/li&gt;
&lt;li&gt;imgSizer (IE7以下で画像の荒れを防ぐ)&lt;/li&gt;
&lt;li&gt;jquery.exfixed IE6で position:fixed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;備考-画像遅延ロードの-lazy-load-は使わない:2763c954d56445700fdcab66b8eafc7c&#34;&gt;備考：画像遅延ロードの Lazy Load は使わない&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;見えない位置の画像を非表示にしておき、見える位置までスクロールすると表示させる。アクセス時のリクエスト数、読込容量を減らすことができる&lt;/li&gt;
&lt;li&gt;Lazy Load は画像が画像検索にインデックスされないので SEO的に不利と思い自分は不採用 (noscriptタグを使う方法は完全な解決策にならないらしいし、hijax links なる解決法もあるらしいが面倒なので却下)&lt;/li&gt;
&lt;li&gt;同様のスクリプトに Unveil.js (Lazy Load をエフェクトなどを省き軽くしたもの)、showByScroll、Echo.js (これはPure JavaScript) 等色々&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web-tan.forum.impressrd.jp/e/2014/05/30/17567/page/1&#34;&gt;グーグルのJavaScript理解はまだ発展途上。画像の遅延読み込みは注意 - Web担当者Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.idea-r.it/blog/110/en/lazy-loading-seo-problem&#34;&gt;Lazy loading and the SEO problem, solved! - Idea R Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;サンプル-html中でのjavascriptファイル読込み:2763c954d56445700fdcab66b8eafc7c&#34;&gt;サンプル：HTML中でのJavaScriptファイル読込み&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- * * * * * * * * * * head タグ内に設置 * * * * * * * * * * * * --&amp;gt;

  &amp;lt;script src=&amp;quot;../js/vendor/modernizr-2.8.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;



  &amp;lt;!-- * * * * * * * * * * body閉じタグ直前に設置 * * * * * * * * * * * * --&amp;gt;


  &amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script src=&amp;quot;../js/vendor/jquery-1.11.2.min.js&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;../js/plugins.minjs&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;!-- jQueryプラグイン等を統合したもの --&amp;gt;
  &amp;lt;script src=&amp;quot;../js/main.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;!-- Google Analytics のトラッキングコードも入れること --&amp;gt;


  &amp;lt;!-- * * * Polyfils * * * --&amp;gt;

  &amp;lt;script&amp;gt;
    //Androidの場合のみ iscroll-lite.js を読みこませる
    if(/Android/.test(navigator.userAgent)){
      $(&#39;script&#39;).attr(&#39;src&#39;,&#39;../bower_components/iscroll/build/iscroll-lite.js&#39;).appendTo(&#39;head&#39;);
      //alert(&#39;テスト：iscroll-lite.jsを読み込みました。&#39;);
    }
  &amp;lt;/script&amp;gt;


  &amp;lt;!--[if IE 9]&amp;gt;
  &amp;lt;script src=&amp;quot;../js/vendor/PIE_IE9.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    /**
     * サポート：border-image, 背景グラデーション
     */
    $(function() {
      if (window.PIE) {
        //$(&#39;.class_name&#39;).each(function() { PIE.attach(this); }); //★★適用させたい要素を指定
      }
    });
  &amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;


  &amp;lt;!--[if IE 8]&amp;gt;
  &amp;lt;script src=&amp;quot;../js/vendor/selectivizr-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;../js/vendor/respond.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;../js/vendor/PIE_IE678.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    /**
     * サポート：border-image, 背景グラデーション, 複数の背景, border-radius, box-shadow(insetには非対応)
     */
    $(function() {
      if (window.PIE) {
        $(&#39;.button, .label, article h2, .pagetop a&#39;).each(function() { //★★適用させたい要素を指定
          PIE.attach(this);
        });
      }
    });
  &amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>レスポンシブな前後の記事リンクのスタイリング</title>
      <link>http://takunagai.github.io/post/wordpress/css-styling_immediate-article-links/</link>
      <pubDate>Fri, 17 Oct 2014 00:00:00 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/wordpress/css-styling_immediate-article-links/</guid>
      <description>

&lt;h3 id=&#34;レイアウト:74c0d7f6cf949ac4bd8efcecad170fbc&#34;&gt;レイアウト&lt;/h3&gt;

&lt;p&gt;以下の条件で決める&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一番直感的な「左は過去、右は未来」の構成&lt;/li&gt;
&lt;li&gt;&amp;ldquo;次の記事 »&amp;rdquo; などとはせず、記事タイトルを表示。親切だし、クリック率の上昇が見込めるから&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;img-url&#34; alt=&#34;前後リンク デスクトップ表示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img-url&#34; alt=&#34;前後リンク タブレット表示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img-url&#34; alt=&#34;前後リンク スマートフォン表示&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;wordpress-テンプレート:74c0d7f6cf949ac4bd8efcecad170fbc&#34;&gt;WordPress テンプレート&lt;/h3&gt;

&lt;p&gt;例は矢印(指差し)マークに &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt; を使用&lt;br /&gt;
背景画像で上下センター揃えにしたらさらに良い&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;next-previous&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;?php previous_post_link(&#39;%link&#39;,&#39;&amp;lt;i class=&amp;quot;fa fa-hand-o-left&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; %title&#39;); ?&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;?php next_post_link(&#39;%link&#39;,&#39;%title &amp;lt;i class=&amp;quot;fa fa-hand-o-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&#39;); ?&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;出力されるhtml:74c0d7f6cf949ac4bd8efcecad170fbc&#34;&gt;出力されるHTML&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;next-previous&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;前記事へのリンク&amp;quot; rel=&amp;quot;prev&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-hand-o-left&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; 前記事のタイトル&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;次記事へのリンク&amp;quot; rel=&amp;quot;next&amp;quot;&amp;gt;次の記事のタイトル &amp;lt;i class=&amp;quot;fa fa-hand-o-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scss-css:74c0d7f6cf949ac4bd8efcecad170fbc&#34;&gt;SCSS/CSS&lt;/h3&gt;

&lt;p&gt;モバイルファースト。デスクトップ用の左右半々表示は &lt;code&gt;display: table;&lt;/code&gt; を使用&lt;br /&gt;
例はレイアウトに必要な記述のみなので、これをベースにスタイリング&lt;/p&gt;

&lt;p&gt;CSSへの変換はコードをコピペしてこちらへ → &lt;a href=&#34;http://sassmeister.com/&#34;&gt;SassMeister&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* ボックスモデル、border/padding含む数値で指定する設定 */
*, *:before, *:after {
  box-sizing: border-box;
}

/* 前後記事へのリンク */
.next-previous {
  border-top: 1px solid silver;
  border-bottom: 1px solid silver;
  p {
    margin: 0;
    &amp;amp;:last-child {
      text-align: right;
      border-top: 1px dotted silver;
    }
  }
}
@media only screen and (min-width:480px) {
  .next-previous {
    display: table;
    width: 100%;
    p {
      display: table-cell;
      width: 45%;
      vertical-align: middle;
      &amp;amp;:first-child {
        padding-right: 5%;
        border-right: 1px solid silver;
      }
      &amp;amp;:last-child {
        padding-left: 5%;
        border-top: none;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>dist と dest の意味・違い</title>
      <link>http://takunagai.github.io/post/comparison_dist_dest/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/comparison_dist_dest/</guid>
      <description>

&lt;h2 id=&#34;dist:7cc95ff082595fdb0f731d09430bbdaa&#34;&gt;dist&lt;/h2&gt;

&lt;p&gt;dist は district の略。「特定の場所」という意味。 公開ディレクトリ名はこれが多い (src → Grunt/gulpで自動処理 → dist みたいな)&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;(ある特定の機能特徴を持った)地域, 地方, 街&lt;/li&gt;
&lt;li&gt;(行政司法上などの目的で区分された)地区, 区域, …区, 管区;｟ 英｠(countyを分けた)郡&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;dest:7cc95ff082595fdb0f731d09430bbdaa&#34;&gt;dest&lt;/h2&gt;

&lt;p&gt;dest は destination の略。「目的とする場所」という意味。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;(旅行などの)目的地, 到達地, 行き先; (仕事などの)到達点; (手紙などの)あて先, 届け先&lt;/li&gt;
&lt;li&gt;最終目標, 目的 .&lt;/li&gt;
&lt;li&gt;〘商〙 (荷物の)仕向け先&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;結論:7cc95ff082595fdb0f731d09430bbdaa&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;まぁ、どっちでもいいんじゃないかな&lt;br /&gt;
gulpなどのビルドシステムの生成先なら、意味的には後者かな&lt;/p&gt;

&lt;h2 id=&#34;参考記事:7cc95ff082595fdb0f731d09430bbdaa&#34;&gt;参考記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ejje.weblio.jp/content/dist&#34;&gt;distの意味 - 英和辞典 Weblio辞書&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ejje.weblio.jp/content/dest&#34;&gt;destの意味 - 英和辞典 Weblio辞書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ローカルサーバーどれ使う？ MAMP(Xampp) と Vagrant の違い・使い分け</title>
      <link>http://takunagai.github.io/post/comparison_mamp_vagrant/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0900</pubDate>
      <author>taky1973@gmail.com (Taku Nagai)</author>
      <guid>http://takunagai.github.io/post/comparison_mamp_vagrant/</guid>
      <description>

&lt;h2 id=&#34;mamp-xampp:51dec08c134701154a7d3216b4ccb92f&#34;&gt;MAMP(Xampp)&lt;/h2&gt;

&lt;p&gt;WordPressサイト開発など Webサーバー、PHP、MySQL の構成でこと足りるなら MAMP(WindowsならXampp)で必要十分。操作パネルで簡単操作。容量は700MB程度&lt;/p&gt;

&lt;p&gt;しかし、サーバーを色々とカスタマイズしたいなら、Vagrant上の仮想マシンにログインしてコマンド操作する方が直感的で楽なのでそちらを選ぼう (MAMPでもやってできないことはないがややこしい)&lt;/p&gt;

&lt;h2 id=&#34;vagrant:51dec08c134701154a7d3216b4ccb92f&#34;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;ローカルPC内に仮想のマシンを構築。つまり、手元のパソコンがあたかも別のパソコンになる感じ&lt;/p&gt;

&lt;p&gt;好きなOS(Linux, Windows 他)をインストールしたり、サーバー設定をいじったり、プログラムやモジュールを追加したり、なんでも自由にできる。バージョン管理ができるプラグインを併用すれば失敗も怖くない&lt;/p&gt;

&lt;p&gt;Linuxサーバーで色々試してみたい程度ならわざわざVPS借りなくても、手元のパソコンにVagrant入れたらいい&lt;/p&gt;

&lt;p&gt;コマンド操作が必要なので敷居が高く感じる人もいるだろうが、&lt;a href=&#34;http://dotinstall.com/lessons/basic_vagrant&#34;&gt;ドットインストール Vagrant入門&lt;/a&gt; をひと通りやってみたら案外いけるもの&lt;/p&gt;

&lt;p&gt;CentOS 6.5 で1.8GBあった。ディスク容量に注意&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>